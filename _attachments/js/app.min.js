var Utils;

Utils = {};

Utils.addOrUpdateDesignDoc = function(designDoc, options) {
  var name;
  name = designDoc._id.replace(/^_design\//, "");
  return database.get("_design/" + name, function(error, result) {
    var ref, ref1;
    if ((result != null ? (ref = result.views) != null ? (ref1 = ref[name]) != null ? ref1.map : void 0 : void 0 : void 0) === designDoc.views[name].map) {
      return options.success();
    } else {
      console.log("Updating design doc for " + name);
      if (result && result._rev) {
        designDoc._rev = result._rev;
      }
      return database.put(designDoc).then(function() {
        return options.success();
      });
    }
  });
};

Utils.createDesignDoc = function(name, mapFunction) {
  var ddoc;
  if (!_.isFunction(mapFunction)) {
    mapFunction = CoffeeScript.compile(mapFunction, {
      bare: true
    });
  } else {
    mapFunction = mapFunction.toString();
  }
  ddoc = {
    _id: '_design/' + name,
    views: {}
  };
  ddoc.views[name] = {
    map: mapFunction
  };
  return ddoc;
};

var L_PREFER_CANVAS, database, databaseName;

L_PREFER_CANVAS = true;

databaseName = "coconut";

database = PouchDB(databaseName);

Backbone.sync = BackbonePouch.sync({
  db: database,
  fetch: 'query'
});

Backbone.Model.prototype.idAttribute = '_id';

var Config,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Config = (function(superClass) {
  extend(Config, superClass);

  function Config() {
    this.cloud_url_no_http = bind(this.cloud_url_no_http, this);
    this.cloud_database_name = bind(this.cloud_database_name, this);
    this.fetch = bind(this.fetch, this);
    return Config.__super__.constructor.apply(this, arguments);
  }

  Config.prototype.initialize = function() {
    return this.set({
      _id: "coconut.config"
    });
  };

  Config.prototype.fetch = function(options) {
    return database.get("coconut.config", (function(_this) {
      return function(error, result) {
        _this.set(result);
        return database.get("coconut.config.local", function(error, result) {
          Coconut.config.local = new Backbone.Model();
          Coconut.config.local.set(result);
          return typeof options.success === "function" ? options.success() : void 0;
        });
      };
    })(this));
  };

  Config.prototype.title = function() {
    return this.get("title") || "Coconut";
  };

  Config.prototype.database_name = function() {
    return database._db_name;
  };

  Config.prototype.cloud_database_name = function() {
    return this.get("cloud_database_name") || this.database_name();
  };

  Config.prototype.cloud_url = function() {
    return "http://" + (this.cloud_url_no_http()) + "/" + (this.cloud_database_name());
  };

  Config.prototype.cloud_url_with_credentials = function() {
    return "http://" + (this.get("cloud_credentials")) + "@" + (this.cloud_url_no_http()) + "/" + (this.cloud_database_name());
  };

  Config.prototype.cloud_log_url_with_credentials = function() {
    return "http://" + (this.get("cloud_credentials")) + "@" + (this.cloud_url_no_http()) + "/" + (this.cloud_database_name()) + "-log";
  };

  Config.prototype.cloud_url_no_http = function() {
    return this.get("cloud").replace(/http:\/\//, "");
  };

  return Config;

})(Backbone.Model);

var Help,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Help = (function(superClass) {
  extend(Help, superClass);

  function Help() {
    return Help.__super__.constructor.apply(this, arguments);
  }

  Help.prototype.initialize = function() {};

  Help.prototype.url = "/help";

  return Help;

})(Backbone.Model);

var Question,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Question = (function(superClass) {
  extend(Question, superClass);

  function Question() {
    this.summaryFieldNames = bind(this.summaryFieldNames, this);
    this.resultSummaryFields = bind(this.resultSummaryFields, this);
    return Question.__super__.constructor.apply(this, arguments);
  }

  Question.prototype.initialize = function() {
    return this.set({
      collection: "result"
    });
  };

  Question.prototype.type = function() {
    return this.get("type");
  };

  Question.prototype.label = function() {
    if (this.get("label") != null) {
      return this.get("label");
    } else {
      return this.get("id");
    }
  };

  Question.prototype.safeLabel = function() {
    return this.label().replace(/[^a-zA-Z0-9 -]/g, "").replace(/[ -]/g, "");
  };

  Question.prototype.repeatable = function() {
    return this.get("repeatable");
  };

  Question.prototype.questions = function() {
    return this.get("questions");
  };

  Question.prototype.value = function() {
    if (this.get("value") != null) {
      return this.get("value");
    } else {
      return "";
    }
  };

  Question.prototype.required = function() {
    if (this.get("required") != null) {
      return this.get("required");
    } else {
      return "true";
    }
  };

  Question.prototype.validation = function() {
    if (this.get("validation") != null) {
      return this.get("validation");
    } else {
      return null;
    }
  };

  Question.prototype.skipLogic = function() {
    return this.get("skip_logic") || "";
  };

  Question.prototype.actionOnChange = function() {
    return this.get("action_on_change") || "";
  };

  Question.prototype.attributeSafeText = function() {
    var returnVal;
    returnVal = this.get("label") != null ? this.get("label") : this.get("id");
    return returnVal.replace(/[^a-zA-Z0-9]/g, "");
  };

  Question.prototype.url = "/question";

  Question.prototype.set = function(attributes) {
    if (attributes.questions != null) {
      attributes.questions = _.map(attributes.questions, function(question) {
        return new Question(question);
      });
    }
    if (attributes.id != null) {
      attributes._id = attributes.id;
    }
    return Question.__super__.set.call(this, attributes);
  };

  Question.prototype.loadFromDesigner = function(domNode) {
    var attribute, i, len, property, ref, result;
    result = Question.fromDomNode(domNode);
    if (result.length === 1) {
      result = result[0];
      this.set({
        id: result.id
      });
      ref = ["label", "type", "repeatable", "required", "validation"];
      for (i = 0, len = ref.length; i < len; i++) {
        property = ref[i];
        attribute = {};
        attribute[property] = result.get(property);
        this.set(attribute);
      }
      return this.set({
        questions: result.questions()
      });
    } else {
      throw "More than one root node";
    }
  };

  Question.prototype.resultSummaryFields = function() {
    var i, numberOfFields, resultSummaryFields, results, returnValue;
    resultSummaryFields = this.get("resultSummaryFields");
    if (resultSummaryFields) {
      return resultSummaryFields;
    } else {
      numberOfFields = Math.min(2, this.questions().length - 1);
      returnValue = {};
      _.each((function() {
        results = [];
        for (var i = 0; 0 <= numberOfFields ? i <= numberOfFields : i >= numberOfFields; 0 <= numberOfFields ? i++ : i--){ results.push(i); }
        return results;
      }).apply(this), (function(_this) {
        return function(index) {
          var ref;
          return returnValue[(ref = _this.questions()[index]) != null ? ref.label() : void 0] = "on";
        };
      })(this));
      return returnValue;
    }
  };

  Question.prototype.summaryFieldNames = function() {
    return _.keys(this.resultSummaryFields());
  };

  Question.prototype.summaryFieldKeys = function() {
    return _.map(this.summaryFieldNames(), function(key) {
      return key.replace(/[^a-zA-Z0-9 -]/g, "").replace(/[ -]/g, "");
    });
  };

  return Question;

})(Backbone.Model);

Question.fromDomNode = function(domNode) {
  return _(domNode).chain().map((function(_this) {
    return function(question) {
      var attribute, i, id, len, property, propertyValue, ref, result;
      question = $(question);
      id = question.attr("id");
      if (question.children("#rootQuestionName").length > 0) {
        id = question.children("#rootQuestionName").val();
      }
      if (!id) {
        return;
      }
      result = new Question;
      result.set({
        id: id
      });
      ref = ["label", "type", "repeatable", "select-options", "radio-options", "autocomplete-options", "validation", "required", "action_on_questions_loaded", "skip_logic", "action_on_change", "image-path", "image-style"];
      for (i = 0, len = ref.length; i < len; i++) {
        property = ref[i];
        attribute = {};
        propertyValue = question.find("#" + property + "-" + id).val();
        if (property === "required") {
          propertyValue = String(question.find("#" + property + "-" + id).is(":checked"));
        }
        if (propertyValue != null) {
          attribute[property] = propertyValue;
          result.set(attribute);
        }
      }
      result.set({
        safeLabel: result.safeLabel()
      });
      if (question.find(".question-definition").length > 0) {
        result.set({
          questions: Question.fromDomNode(question.children(".question-definition"))
        });
      }
      return result;
    };
  })(this)).compact().value();
};

var QuestionCollection,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

QuestionCollection = (function(superClass) {
  extend(QuestionCollection, superClass);

  function QuestionCollection() {
    return QuestionCollection.__super__.constructor.apply(this, arguments);
  }

  QuestionCollection.prototype.model = Question;

  QuestionCollection.prototype.pouch = {
    options: {
      query: {
        include_docs: true,
        fun: "questions"
      }
    }
  };

  QuestionCollection.prototype.parse = function(response) {
    return _(response.rows).pluck("doc");
  };

  QuestionCollection.load = function(options) {
    var questionsDesignDoc;
    Coconut.questions = new QuestionCollection();
    questionsDesignDoc = Utils.createDesignDoc("questions", function(doc) {
      if (doc.collection && doc.collection === "question") {
        return emit(doc._id, doc.resultSummaryFields);
      }
    });
    return Utils.addOrUpdateDesignDoc(questionsDesignDoc, {
      success: function() {
        return Coconut.questions.fetch({
          success: function() {
            return options.success();
          }
        });
      }
    });
  };

  return QuestionCollection;

})(Backbone.Collection);

var Result,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Result = (function(superClass) {
  extend(Result, superClass);

  function Result() {
    return Result.__super__.constructor.apply(this, arguments);
  }

  Result.prototype.initialize = function() {
    this.set({
      collection: "result"
    });
    if (!this.attributes.createdAt) {
      this.set({
        createdAt: moment(new Date()).format(Coconut.config.get("date_format"))
      });
    }
    if (!this.attributes.lastModifiedAt) {
      return this.set({
        lastModifiedAt: moment(new Date()).format(Coconut.config.get("date_format"))
      });
    }
  };

  Result.prototype.question = function() {
    return this.get("question");
  };

  Result.prototype.tags = function() {
    var tags;
    tags = this.get("Tags");
    if (tags != null) {
      return tags.split(/, */);
    }
    return [];
  };

  Result.prototype.complete = function() {
    var complete;
    if (_.include(this.tags(), "complete")) {
      return true;
    }
    complete = this.get("complete");
    if (typeof complete === "undefined") {
      complete = this.get("Complete");
    }
    if (complete === null || typeof complete === "undefined") {
      return false;
    }
    if (complete === true || complete.match(/true|yes/)) {
      return true;
    }
  };

  Result.prototype.shortString = function() {
    var result;
    result = this.string;
    if (result.length > 40) {
      return result.substring(0, 40) + "...";
    } else {
      return result;
    }
  };

  Result.prototype.summaryKeys = function(question) {
    var relevantKeys;
    relevantKeys = question.summaryFieldKeys();
    if (relevantKeys.length === 0) {
      relevantKeys = _.difference(_.keys(result.toJSON()), ["_id", "_rev", "complete", "question", "collection"]);
    }
    return relevantKeys;
  };

  Result.prototype.summaryValues = function(question) {
    return _.map(this.summaryKeys(question), (function(_this) {
      return function(key) {
        var returnVal;
        returnVal = _this.get(key) || "";
        if (typeof returnVal === "object") {
          returnVal = JSON.stringify(returnVal);
        }
        return returnVal;
      };
    })(this));
  };

  Result.prototype.get = function(attribute) {
    var original;
    if (User.currentUser == null) {
      return null;
    }
    original = Result.__super__.get.call(this, attribute);
    if (User.currentUser.hasRole("cleaner")) {
      return original;
    }
    if ((original != null) && User.currentUser.hasRole("reports")) {
      if (_.contains(Coconut.identifyingAttributes, attribute)) {
        return b64_sha1(original);
      }
    }
    return original;
  };

  Result.prototype.toJSON = function() {
    var json;
    json = Result.__super__.toJSON.call(this);
    if (User.currentUser.hasRole("admin")) {
      return json;
    }
    if (User.currentUser.hasRole("reports")) {
      _.each(json, (function(_this) {
        return function(value, key) {
          if ((value != null) && _.contains(Coconut.identifyingAttributes, key)) {
            return json[key] = b64_sha1(value);
          }
        };
      })(this));
    }
    return json;
  };

  Result.prototype.save = function(key, value, options) {
    this.set({
      user: $.cookie('current_user'),
      lastModifiedAt: moment(new Date()).format(Coconut.config.get("date_format"))
    });
    return Result.__super__.save.call(this, key, value, options);
  };

  Result.prototype.wasTransferredOut = function() {
    var transferred, transferredTo;
    transferred = this.get("transferred");
    if (transferred != null) {
      transferredTo = transferred[transferred.length - 1].to;
      if (transferredTo !== User.currentUser.id) {
        return true;
      }
    }
    return false;
  };

  return Result;

})(Backbone.Model);

var ResultCollection,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ResultCollection = (function() {
  function ResultCollection() {
    this.fetch = bind(this.fetch, this);
  }

  ResultCollection.prototype.fetch = function(options) {
    var fields, queryOptions;
    queryOptions = _.extend({
      include_docs: false,
      startkey: [options.question, options.isComplete === true],
      endkey: [options.question, options.isComplete === true, {}]
    }, options);
    fields = (Coconut.questions.find(function(question) {
      return question.id === options.question;
    })).summaryFieldKeys();
    return database.query("results", queryOptions, (function(_this) {
      return function(error, result) {
        _this.results = _(result.rows).map(function(row) {
          var returnVal;
          returnVal = _.object(fields, row.value);
          returnVal._id = row.id;
          return new Result(returnVal);
        });
        return options.success();
      };
    })(this));
  };

  ResultCollection.prototype.each = function(arg) {
    return _(this.results).each(arg);
  };

  ResultCollection.load = function(options) {
    return Coconut.questions.fetch({
      error: function(error) {
        return console.log("Error loading Coconut.questions: " + (JSON.stringify(error)));
      },
      success: function() {
        var designDocs, finished;
        if (Coconut.questions.length === 0) {
          return;
        }
        designDocs = {
          results: "(doc) ->\n  if doc.collection is \"result\" and doc.question and (doc.complete or doc.complete is null) and doc.createdAt\n    summaryFields = (" + (Coconut.questions.map(function(question) {
            return "if doc.question is '" + question.id + "' then " + (JSON.stringify(question.summaryFieldKeys()));
          }).join(" else ")) + ")\n\n    summaryResults = []\n    for field in summaryFields\n      summaryResults.push doc[field]\n\n    emit([doc.question, doc.complete is \"true\", doc.createdAt], summaryResults)",
          resultsByQuestionNotCompleteNotTransferredOut: function(document) {
            if (document.collection === "result") {
              if (document.complete !== "true") {
                if (document.transferred != null) {
                  return emit(document.question, document.transferred[document.transferred.length - 1].to);
                } else {
                  return emit(document.question, null);
                }
              }
            }
          },
          rawNotificationsConvertedToCaseNotifications: function(document) {
            if (document.hf && document.hasCaseNotification) {
              return emit(document.date, null);
            }
          }
        };
        finished = _.after(_(designDocs).size(), function() {
          return options.success();
        });
        return _(designDocs).each(function(designDoc, name) {
          designDoc = Utils.createDesignDoc(name, designDoc);
          return Utils.addOrUpdateDesignDoc(designDoc, {
            success: function() {
              return finished();
            }
          });
        });
      }
    });
  };

  return ResultCollection;

})();

var Sync,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Sync = (function(superClass) {
  extend(Sync, superClass);

  function Sync() {
    this.replicateApplicationDocs = bind(this.replicateApplicationDocs, this);
    this.getFromCloud = bind(this.getFromCloud, this);
    this.log = bind(this.log, this);
    this.sendToCloud = bind(this.sendToCloud, this);
    this.checkForInternet = bind(this.checkForInternet, this);
    this.last_get_time = bind(this.last_get_time, this);
    this.was_last_get_successful = bind(this.was_last_get_successful, this);
    this.last_send_time = bind(this.last_send_time, this);
    this.was_last_send_successful = bind(this.was_last_send_successful, this);
    this.last_send = bind(this.last_send, this);
    return Sync.__super__.constructor.apply(this, arguments);
  }

  Sync.prototype.initialize = function() {
    return this.set({
      _id: "SyncLog"
    });
  };

  Sync.prototype.target = function() {
    return Coconut.config.cloud_url();
  };

  Sync.prototype.last_send = function() {
    return this.get("last_send_result");
  };

  Sync.prototype.was_last_send_successful = function() {
    var last_send_data;
    if (this.get("last_send_error") === true) {
      return false;
    }
    last_send_data = this.last_send();
    if (last_send_data == null) {
      return false;
    }
    if ((last_send_data.no_changes != null) && last_send_data.no_changes === true) {
      return true;
    }
    return (last_send_data.docs_read === last_send_data.docs_written) && last_send_data.doc_write_failures === 0;
  };

  Sync.prototype.last_send_time = function() {
    var result;
    result = this.get("last_send_time");
    if (result) {
      return moment(this.get("last_send_time")).fromNow();
    } else {
      return "never";
    }
  };

  Sync.prototype.was_last_get_successful = function() {
    return this.get("last_get_success");
  };

  Sync.prototype.last_get_time = function() {
    var result;
    result = this.get("last_get_time");
    if (result) {
      return moment(this.get("last_get_time")).fromNow();
    } else {
      return "never";
    }
  };

  Sync.prototype.checkForInternet = function(options) {
    this.log("Checking for internet. (Is " + (Coconut.config.cloud_url()) + " is reachable?) Please wait.");
    return $.ajax({
      url: Coconut.config.cloud_url(),
      error: (function(_this) {
        return function(error) {
          _this.log("ERROR! " + (Coconut.config.cloud_url()) + " is not reachable. Do you have enough airtime? Are you on WIFI?  Either the internet is not working or the site is down: " + (JSON.stringify(error)));
          options.error();
          return _this.save({
            last_send_error: true
          });
        };
      })(this),
      success: (function(_this) {
        return function() {
          _this.log((Coconut.config.cloud_url()) + " is reachable, so internet is available.");
          return options.success();
        };
      })(this)
    });
  };

  Sync.prototype.sendToCloud = function(options) {
    return this.fetch({
      error: (function(_this) {
        return function(error) {
          return _this.log("Unable to fetch Sync doc: " + (JSON.stringify(error)));
        };
      })(this),
      success: (function(_this) {
        return function() {
          return _this.checkForInternet({
            error: function(error) {
              return options != null ? typeof options.error === "function" ? options.error(error) : void 0 : void 0;
            },
            success: function() {
              _this.log("Creating list of all results on the tablet. Please wait.");
              return database.query("results", {}, function(error, result) {
                var resultIDs;
                if (error) {
                  _this.log("Could not retrieve list of results: " + (JSON.stringify(error)));
                  options.error();
                  return _this.save({
                    last_send_error: true
                  });
                } else {
                  _this.log("Synchronizing " + result.rows.length + " results. Please wait.");
                  resultIDs = _.pluck(result.rows, "id");
                  return database.replicate.to(Coconut.config.cloud_url_with_credentials(), {
                    doc_ids: resultIDs
                  }).on('complete', function(info) {
                    _this.log("Success! Send data finished: created, updated or deleted " + info.docs_written + " results on the server.");
                    _this.save({
                      last_send_result: result,
                      last_send_error: false,
                      last_send_time: new Date().getTime()
                    });
                    return options.success();
                  }).on('error', function(error) {
                    return options.error(error);
                  });
                }
              });
            }
          });
        };
      })(this)
    });
  };

  Sync.prototype.log = function(message) {
    return Coconut.debug(message);
  };

  Sync.prototype.getFromCloud = function(options) {
    return this.fetch({
      error: (function(_this) {
        return function(error) {
          return _this.log("Unable to fetch Sync doc: " + (JSON.stringify(error)));
        };
      })(this),
      success: (function(_this) {
        return function() {
          return _this.checkForInternet({
            error: function(error) {
              return options != null ? typeof options.error === "function" ? options.error(error) : void 0 : void 0;
            },
            success: function() {
              return _this.fetch({
                success: function() {
                  return _this.replicateApplicationDocs({
                    error: function(error) {
                      $.couch.logout();
                      _this.log("ERROR updating application: " + (JSON.stringify(error)));
                      _this.save({
                        last_get_success: false
                      });
                      return options != null ? typeof options.error === "function" ? options.error(error) : void 0 : void 0;
                    },
                    success: function() {
                      _this.save({
                        last_get_success: true,
                        last_get_time: new Date().getTime()
                      });
                      if (options != null) {
                        if (typeof options.success === "function") {
                          options.success();
                        }
                      }
                      return _.delay(function() {
                        return document.location.reload();
                      }, 5000);
                    }
                  });
                }
              });
            }
          });
        };
      })(this)
    });
  };

  Sync.prototype.replicateApplicationDocs = function(options) {
    return this.checkForInternet({
      error: function(error) {
        return options != null ? typeof options.error === "function" ? options.error(error) : void 0 : void 0;
      },
      success: (function(_this) {
        return function() {
          _this.log("Getting list of application documents to replicate");
          return $.ajax({
            url: (Coconut.config.cloud_url()) + "/_design/coconut/_view/docIDsForUpdating",
            dataType: "json",
            include_docs: false,
            error: function(a, b, error) {
              return typeof options.error === "function" ? options.error(error) : void 0;
            },
            success: function(result) {
              var doc_ids;
              doc_ids = _.pluck(result.rows, "id");
              doc_ids = _(doc_ids).without("_design/coconut");
              _this.log("Updating " + doc_ids.length + " docs <small>(users and forms: " + (doc_ids.join(',')) + ")</small>. Please wait.");
              return database.replicate.from(Coconut.config.cloud_url_with_credentials(), {
                doc_ids: doc_ids
              }).on('change', function(info) {
                return $("#content").html("<h2> " + info.docs_written + " written out of " + doc_ids.length + " (" + (parseInt(100 * (info.docs_written / doc_ids.length))) + "%) </h2>");
              }).on('complete', function(info) {
                var resultData;
                resultData = _(info).chain().map(function(value, property) {
                  if (property.match(/^doc.*/)) {
                    return property + ": " + value;
                  }
                }).compact().value();
                _this.log("Finished updating application documents: " + (JSON.stringify(resultData)));
                return typeof options.success === "function" ? options.success() : void 0;
              }).on('error', function(error) {
                _this.log("Error while updating application documents: " + (JSON.stringify(error)));
                return typeof options.error === "function" ? options.error(error) : void 0;
              });
            }
          });
        };
      })(this)
    });
  };

  return Sync;

})(Backbone.Model);

var User, UserCollection,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

User = (function(superClass) {
  extend(User, superClass);

  function User() {
    return User.__super__.constructor.apply(this, arguments);
  }

  User.prototype.url = "/user";

  User.prototype.username = function() {
    return this.get("_id").replace(/^user\./, "");
  };

  User.prototype.district = function() {
    return this.get("district");
  };

  User.prototype.passwordIsValid = function(password) {
    return this.get("password") === password;
  };

  User.prototype.isAdmin = function() {
    return _(this.get("roles")).include("admin");
  };

  User.prototype.hasRole = function(role) {
    return _(this.get("roles")).include(role);
  };

  User.prototype.nameOrUsername = function() {
    return this.get("name") || this.username();
  };

  User.prototype.login = function() {
    User.currentUser = this;
    $.cookie('current_user', this.username());
    $("span#user").html(this.username());
    $('#district').html(this.get("district"));
    $("a[href=#logout]").show();
    $("a[href=#login]").hide();
    if (this.isAdmin()) {
      $("#manage-button").show();
    } else {
      $("#manage-button").hide();
    }
    if (this.hasRole("reports")) {
      $("#top-menu").hide();
      return $("#bottom-menu").hide();
    }
  };

  User.prototype.refreshLogin = function() {
    return this.login();
  };

  return User;

})(Backbone.Model);

User.isAuthenticated = function(options) {
  var current_user_cookie, user;
  current_user_cookie = $.cookie('current_user');
  if ((current_user_cookie != null) && current_user_cookie !== "") {
    user = new User({
      _id: "user." + ($.cookie('current_user'))
    });
    return user.fetch({
      success: (function(_this) {
        return function() {
          user.refreshLogin();
          return options.success(user);
        };
      })(this),
      error: function(error) {
        console.error("Could not fetch user." + ($.cookie('current_user')) + ": " + error);
        return options != null ? options.error() : void 0;
      }
    });
  } else {
    if (options.error != null) {
      return options.error();
    }
  }
};

User.logout = function() {
  $.cookie('current_user', "");
  $("span#user").html("");
  $('#district').html("");
  $("a[href=#logout]").hide();
  $("a[href=#login]").show();
  return User.currentUser = null;
};

UserCollection = (function(superClass) {
  extend(UserCollection, superClass);

  function UserCollection() {
    return UserCollection.__super__.constructor.apply(this, arguments);
  }

  UserCollection.prototype.model = User;

  UserCollection.prototype.url = '/user';

  return UserCollection;

})(Backbone.Collection);

var UserCollection,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

UserCollection = (function(superClass) {
  extend(UserCollection, superClass);

  function UserCollection() {
    return UserCollection.__super__.constructor.apply(this, arguments);
  }

  UserCollection.prototype.model = User;

  UserCollection.prototype.pouch = {
    options: {
      query: {
        include_docs: true,
        fun: "users"
      }
    }
  };

  UserCollection.prototype.parse = function(response) {
    return _(response.rows).pluck("doc");
  };

  UserCollection.prototype.district = function(userId) {
    if (!userId.match(/^user\./)) {
      userId = "user." + userId;
    }
    return this.get(userId).get("district");
  };

  return UserCollection;

})(Backbone.Collection);

UserCollection.load = function(options) {
  var designDocs, finished;
  Coconut.users = new UserCollection();
  designDocs = {
    users: function(doc) {
      if (doc.collection && doc.collection === "user") {
        return emit(doc._id, null);
      }
    },
    usersByDistrict: function(doc) {
      if (doc.collection && doc.collection === "user") {
        return emit(doc.district, [doc.name, doc._id.substring(5)]);
      }
    }
  };
  finished = _.after(_(designDocs).size(), function() {
    return Coconut.users.fetch({
      success: function() {
        return options.success();
      }
    });
  });
  return _(designDocs).each(function(designDoc, name) {
    designDoc = Utils.createDesignDoc(name, designDoc);
    return Utils.addOrUpdateDesignDoc(designDoc, {
      success: function() {
        return finished();
      }
    });
  });
};

var CsvView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

CsvView = (function(superClass) {
  extend(CsvView, superClass);

  function CsvView() {
    this.render = bind(this.render, this);
    return CsvView.__super__.constructor.apply(this, arguments);
  }

  CsvView.prototype.el = '#content';

  CsvView.prototype.viewQuery = function(options) {
    var results;
    results = new ResultCollection();
    return results.fetch({
      question: this.question,
      isComplete: "trueAndFalse",
      include_docs: true,
      startTime: this.startDate,
      endTime: this.endDate,
      success: function() {
        results.fields = {};
        results.each(function(result) {
          return _.each(_.keys(result.attributes), function(key) {
            if (!_.contains(["_id", "_rev", "question"], key)) {
              return results.fields[key] = true;
            }
          });
        });
        results.fields = _.keys(results.fields);
        return options.success(results);
      }
    });
  };

  CsvView.prototype.render = function() {
    this.$el.html("Compiling CSV file.");
    return this.viewQuery({
      success: (function(_this) {
        return function(results) {
          var csvData;
          csvData = results.map(function(result) {
            return _.map(results.fields, function(field) {
              var value;
              value = result.get(field);
              if (value != null ? value.indexOf("\"") : void 0) {
                return "\"" + (value.replace(/"/, "\"\"")) + "\"";
              } else if (value != null ? value.indexOf(",") : void 0) {
                return "\"" + value + "\"";
              } else {
                return value;
              }
            }).join(",");
          }).join("\n");
          _this.$el.html("<a id='csv' href='data:text/octet-stream;base64," + (Base64.encode(results.fields.join(",") + "\n" + csvData)) + "' download='" + _this.question + "-" + _this.startDate + "-" + _this.endDate + ".csv'>Download spreadsheet</a>");
          return $("a#csv").button();
        };
      })(this)
    });
  };

  return CsvView;

})(Backbone.View);

var HelpView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

HelpView = (function(superClass) {
  extend(HelpView, superClass);

  function HelpView() {
    this.render = bind(this.render, this);
    return HelpView.__super__.constructor.apply(this, arguments);
  }

  HelpView.prototype.el = '#content';

  HelpView.prototype.events = {
    "click input[value=Send]": "send"
  };

  HelpView.prototype.render = function() {
    if (this.helpDocument != null) {
      return $.ajax({
        url: "documentation/" + this.helpDocument + ".markdown",
        success: (function(_this) {
          return function(result) {
            _this.$el.html(markdown.toHTML(result));
            return _this.appendHelpForm();
          };
        })(this)
      });
    } else {
      this.$el.html("");
      return this.appendHelpForm();
    }
  };

  HelpView.prototype.appendHelpForm = function() {
    return this.$el.append("<hr/> <label style='display:block' for='message'>If you are having trouble please contact your supervisor as soon as possible. You can also describe the problem in the box below and it will send a message to our support team. We'll get back to you as soon as possible.</label> <textarea style='width:100%' id='message' name='message'></textarea> <div id='messageBox'></div> </div> <input type='submit' value='Send'></input>");
  };

  HelpView.prototype.send = function() {
    var help, messageText, sync;
    messageText = $("#message").val();
    if (messageText.length === 0) {
      return false;
    }
    help = new Help({
      date: moment(new Date()).format(Coconut.config.get("date_format")),
      text: messageText,
      user: User.currentUser.id.replace(/user\./, "")
    });
    help.save();
    sync = new Sync();
    $("#messageBox").append("Attempting to 'Send Data'");
    sync.sendToCloud({
      success: function() {
        return $("#messageBox").append("Thank you for your feedback, it has been sent");
      },
      error: function() {
        return $("#messageBox").append("There was a problem sending data, but your messages has been saved. If you have connectivity you can try again by pressing the 'Send data' button at the bottom of the screen.");
      }
    });
    return false;
  };

  return HelpView;

})(Backbone.View);

var LocalConfigView,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LocalConfigView = (function(superClass) {
  extend(LocalConfigView, superClass);

  function LocalConfigView() {
    return LocalConfigView.__super__.constructor.apply(this, arguments);
  }

  LocalConfigView.prototype.el = '#content';

  LocalConfigView.prototype.render = function() {
    this.$el.html("<form id='local-config'> <fieldset> <legend>Mode</legend> <label for='cloud'>Cloud (reporting system)</label> <input id='cloud' name='mode' type='radio' value='cloud'></input> <label for='mobile'>Mobile (data collection, probably on a tablet)</label> <input id='mobile' name='mode' type='radio' value='mobile'></input> </fieldset> <button>Save</button> <div id='message'></div> </form>");
    this.$el.find('input[type=radio],input[type=checkbox]').checkboxradio();
    this.$el.find('button').button();
    return Coconut.config.local.fetch({
      success: function() {
        return js2form($('#local-config').get(0), Coconut.config.local.toJSON());
      },
      error: function() {
        return $('#message').html("Complete the fields before continuing");
      }
    });
  };

  LocalConfigView.prototype.events = {
    "click #local-config button": "save"
  };

  LocalConfigView.prototype.save = function() {
    var result;
    result = $('#local-config').toObject();
    if (result.mode) {
      Coconut.config.local.save(result, {
        success: function() {
          Coconut.router.navigate("", false);
          return location.reload();
        }
      });
    } else {
      $('#message').html("Fields incomplete");
    }
    return false;
  };

  return LocalConfigView;

})(Backbone.View);

var LoginView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LoginView = (function(superClass) {
  extend(LoginView, superClass);

  function LoginView() {
    this.render = bind(this.render, this);
    return LoginView.__super__.constructor.apply(this, arguments);
  }

  LoginView.prototype.el = '#content';

  LoginView.prototype.render = function() {
    this.$el.html("<style> #login_wrapper{ font-size: 200%; width:50%; margin: 0px auto; } #login_message{ margin-top: 20px; margin-bottom: 20px; } #login_form input{ font-size: 100%; display: block; } #login_form input[type=submit]{ height: 2em; } </style> <div id='login_wrapper'> <div id='login_message'>Please login to continue:</div> <form id='login_form'> <label for='username'>Username</label> <input type='text' id='username' name='username'> <label for='password'>Password</label> <input id='password' name='password' type='password'> <input type='submit' value='Login'> </form> </div>");
    $("input[type=text],input[type=password]").textinput();
    return $("input[type=submit]").button();
  };

  LoginView.prototype.events = {
    "submit form#login_form": "login"
  };

  LoginView.prototype.updateNavBar = function() {};

  LoginView.prototype.login = function() {
    var loginData, user;
    loginData = $('#login_form').toObject();
    user = new User({
      _id: "user." + loginData.username
    });
    user.fetch({
      success: (function(_this) {
        return function() {
          if (user.passwordIsValid(loginData.password)) {
            user.login();
            return _this.callback.success();
          } else {
            return $('#login_message').html("Wrong password");
          }
        };
      })(this),
      error: (function(_this) {
        return function() {
          return $('#login_message').html("Wrong username");
        };
      })(this)
    });
    return false;
  };

  return LoginView;

})(Backbone.View);

var MenuView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

MenuView = (function(superClass) {
  extend(MenuView, superClass);

  function MenuView() {
    this.render = bind(this.render, this);
    return MenuView.__super__.constructor.apply(this, arguments);
  }

  MenuView.prototype.el = '.question-buttons';

  MenuView.prototype.events = {
    "change": "render"
  };

  MenuView.prototype.render = function() {
    this.$el.html("<div id='navbar' data-role='navbar'> <ul></ul> </div>");
    return Coconut.questions.fetch({
      success: (function(_this) {
        return function() {
          _this.$el.find("ul").html(Coconut.questions.map(function(question, index) {
            return "<li><a id='menu-" + index + "' href='#show/results/" + (escape(question.id)) + "'><h2>" + question.id + "<div id='menu-partial-amount'></div></h2></a></li>";
          }).join(" "));
          $(".question-buttons").navbar();
          return _this.update();
        };
      })(this)
    });
  };

  MenuView.prototype.update = function() {
    if (Coconut.config.local.get("mode") === "mobile") {
      User.isAuthenticated({
        success: function() {
          return Coconut.questions.each((function(_this) {
            return function(question, index) {
              return database.query("resultsByQuestionNotCompleteNotTransferredOut", {
                key: question.id,
                include_docs: false
              }, function(error, result) {
                var total;
                if (error) {
                  console.log(error);
                }
                total = 0;
                _(result.rows).each(function(row) {
                  var transferredTo;
                  transferredTo = row.value;
                  if (transferredTo != null) {
                    if (User.currentUser.id === transferredTo) {
                      return total += 1;
                    }
                  } else {
                    return total += 1;
                  }
                });
                return $("#menu-" + index + " #menu-partial-amount").html(total);
              });
            };
          })(this));
        }
      });
    }
    return database.get("version", function(error, result) {
      if (error) {
        return $("#version").html("-");
      } else {
        return $("#version").html(result.version);
      }
    });
  };

  return MenuView;

})(Backbone.View);

var QuestionView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

window.SkipTheseWhen = function(argQuestions, result) {
  var disabledClass, i, j, len, len1, question, questions, results;
  questions = [];
  argQuestions = argQuestions.split(/\s*,\s*/);
  for (i = 0, len = argQuestions.length; i < len; i++) {
    question = argQuestions[i];
    questions.push(window.questionCache[question]);
  }
  disabledClass = "disabled_skipped";
  results = [];
  for (j = 0, len1 = questions.length; j < len1; j++) {
    question = questions[j];
    if (result) {
      results.push(question.addClass(disabledClass));
    } else {
      results.push(question.removeClass(disabledClass));
    }
  }
  return results;
};

window.ResultOfQuestion = function(name) {
  var base;
  return (typeof (base = window.getValueCache)[name] === "function" ? base[name]() : void 0) || null;
};

QuestionView = (function(superClass) {
  extend(QuestionView, superClass);

  function QuestionView() {
    this.render = bind(this.render, this);
    return QuestionView.__super__.constructor.apply(this, arguments);
  }

  QuestionView.prototype.initialize = function() {
    if (Coconut.resultCollection == null) {
      Coconut.resultCollection = new ResultCollection();
    }
    return this.autoscrollTimer = 0;
  };

  QuestionView.prototype.el = '#content';

  QuestionView.prototype.triggerChangeIn = function(names) {
    var elements, i, len, name, results;
    results = [];
    for (i = 0, len = names.length; i < len; i++) {
      name = names[i];
      elements = [];
      elements.push(window.questionCache[name].find("input, select, textarea, img"));
      results.push($(elements).each((function(_this) {
        return function(index, element) {
          var event;
          event = {
            target: element
          };
          return _this.actionOnChange(event);
        };
      })(this)));
    }
    return results;
  };

  QuestionView.prototype.render = function() {
    var autocompleteElements, skipperList;
    this.$el.html("<style> .message { color: grey; font-weight: bold; padding: 10px; border: 1px yellow dotted; background: yellow; display: none; } label.radio { border-radius:20px; display:block; padding:4px 11px; border: 1px solid black; cursor: pointer; text-decoration: none; } input[type='radio']:checked + label { background-color:#ddd; background: #5393c5; background-image: -webkit-gradient(linear,left top,left bottom,from(#5393c5),to(#6facd5)); background-image: -webkit-linear-gradient(#5393c5,#6facd5); background-image: -moz-linear-gradient(#5393c5,#6facd5); background-image: -ms-linear-gradient(#5393c5,#6facd5); background-image: -o-linear-gradient(#5393c5,#6facd5); background-image: linear-gradient(#5393c5,#6facd5); } input[type='radio']{ height: 0px; } div.question.radio{ padding-top: 8px; padding-bottom: 8px; } .tt-hint{ display:none } .tt-dropdown-menu{ width: 100%; background-color: lightgray; } .tt-suggestion{ background-color: white; border-radius:20px; display:block; padding:4px 11px; border: 1px solid black; cursor: pointer; text-decoration: none; } .tt-suggestion .{ } </style> <div style='position:fixed; right:5px; color:white; padding:20px; z-index:5' id='messageText'> <a href='#help/" + this.model.id + "'>Help</a> </div> <div style='position:fixed; right:5px; color:white; background-color: #333; padding:20px; display:none; z-index:10' id='messageText'> Saving... </div> <h1>" + this.model.id + "</h1> <div id='question-view'> <form> " + (this.toHTMLForm(this.model)) + " </form> </div>");
    js2form($('form').get(0), this.result.toJSON());
    this.updateCache();
    this.updateSkipLogic();
    skipperList = [];
    $(this.model.get("questions")).each((function(_this) {
      return function(index, question) {
        if (question.actionOnChange().match(/skip/i)) {
          skipperList.push(question.safeLabel());
        }
        if ((question.get("action_on_questions_loaded") != null) && question.get("action_on_questions_loaded") !== "") {
          return CoffeeScript["eval"](question.get("action_on_questions_loaded"));
        }
      };
    })(this));
    this.triggerChangeIn(skipperList);
    this.$el.find("input[type=text],input[type=number],input[type='autocomplete from previous entries'],input[type='autocomplete from list'],input[type='autocomplete from code']").textinput();
    this.$el.find('input[type=checkbox]').checkboxradio();
    this.$el.find('ul').listview();
    this.$el.find('select').selectmenu();
    this.$el.find('a').button();
    this.$el.find('input[type=date]').datebox({
      mode: "calbox",
      dateFormat: "%d-%m-%Y"
    });
    autocompleteElements = [];
    _.each($("input[type='autocomplete from list']"), function(element) {
      element = $(element);
      element.typeahead({
        local: element.attr("data-autocomplete-options").replace(/\n|\t/, "").split(/, */)
      });
      return autocompleteElements.push(element);
    });
    _.each($("input[type='autocomplete from code']"), function(element) {
      element = $(element);
      element.typeahead({
        local: eval(element.attr("data-autocomplete-options"))
      });
      return autocompleteElements.push(element);
    });
    _.each($("input[type='autocomplete from previous entries']"), function(element) {
      element = $(element);
      element.typeahead({
        prefetch: document.location.pathname.substring(0, document.location.pathname.indexOf("index.html")) + ("_list/values/byValue?key=\"" + (element.attr("name")) + "\"")
      });
      return autocompleteElements.push(element);
    });
    _.each(autocompleteElements, (function(_this) {
      return function(autocompeteElement) {
        return autocompeteElement.blur(function() {
          return _this.autoscroll(autocompeteElement);
        });
      };
    })(this));
    if (this.readonly) {
      return $('input, textarea').attr("readonly", "true");
    }
  };

  QuestionView.prototype.events = {
    "change #question-view input": "onChange",
    "change #question-view select": "onChange",
    "change #question-view textarea": "onChange",
    "click #question-view button:contains(+)": "repeat",
    "click #question-view a:contains(Get current location)": "getLocation",
    "click .next_error": "runValidate",
    "click .validate_one": "onValidateOne"
  };

  QuestionView.prototype.runValidate = function() {
    return this.validateAll();
  };

  QuestionView.prototype.onChange = function(event) {
    var $target, eventStamp, messageVisible, targetName;
    $target = $(event.target);
    eventStamp = $target.attr("id");
    if (eventStamp === this.oldStamp && (new Date()).getTime() < this.throttleTime + 1000) {
      return;
    }
    this.throttleTime = (new Date()).getTime();
    this.oldStamp = eventStamp;
    targetName = $target.attr("name");
    if (targetName === "complete") {
      if (this.changedComplete) {
        this.changedComplete = false;
        return;
      }
      this.validateAll();
      Coconut.menuView.update();
      this.save();
      this.updateSkipLogic();
      return this.actionOnChange(event);
    } else {
      this.changedComplete = false;
      messageVisible = window.questionCache[targetName].find(".message").is(":visible");
      return _.delay((function(_this) {
        return function() {
          var wasValid;
          if (!messageVisible) {
            wasValid = _this.validateOne({
              key: targetName,
              autoscroll: false,
              button: "<button type='button' data-name='" + targetName + "' class='validate_one'>Validate</button>"
            });
            _this.save();
            _this.updateSkipLogic();
            _this.actionOnChange(event);
            if (wasValid) {
              return _this.autoscroll(event);
            }
          }
        };
      })(this), 500);
    }
  };

  QuestionView.prototype.onValidateOne = function(event) {
    var $target, name;
    $target = $(event.target);
    name = $(event.target).attr('data-name');
    return this.validateOne({
      key: name,
      autoscroll: true,
      leaveMessage: false,
      button: "<button type='button' data-name='" + name + "' class='validate_one'>Validate</button>"
    });
  };

  QuestionView.prototype.validateAll = function() {
    var i, isValid, key, len, questionIsntValid, ref;
    isValid = true;
    ref = window.keyCache;
    for (i = 0, len = ref.length; i < len; i++) {
      key = ref[i];
      questionIsntValid = !this.validateOne({
        key: key,
        autoscroll: isValid,
        leaveMessage: false
      });
      if (isValid && questionIsntValid) {
        isValid = false;
      }
    }
    this.completeButton(isValid);
    if (isValid) {
      $("[name=complete]").parent().scrollTo();
    }
    return isValid;
  };

  QuestionView.prototype.validateOne = function(options) {
    var $message, $question, autoscroll, button, e, key, leaveMessage, message;
    key = options.key || '';
    autoscroll = options.autoscroll || false;
    button = options.button || "<button type='button' class='next_error'>Next Error</button>";
    leaveMessage = options.leaveMessage || false;
    $question = window.questionCache[key];
    $message = $question.find(".message");
    try {
      message = this.isValid(key);
    } catch (_error) {
      e = _error;
      alert("isValid error in " + key + "\n" + e);
      message = "";
    }
    if ($message.is(":visible") && leaveMessage) {
      if (message === "") {
        return true;
      } else {
        return false;
      }
    }
    if (message === "") {
      $message.hide();
      if (autoscroll) {
        this.autoscroll($question);
      }
      return true;
    } else {
      $message.show().html(message + " " + button).find("button").button();
      this.scrollToQuestion($question);
      return false;
    }
  };

  QuestionView.prototype.isValid = function(question_id) {
    var error, labelText, question, questionWrapper, ref, required, result, type, validation, validationFunctionResult, value;
    if (!question_id) {
      return;
    }
    result = [];
    questionWrapper = window.questionCache[question_id];
    if (questionWrapper.hasClass("label")) {
      return "";
    }
    question = $("[name=" + question_id + "]", questionWrapper);
    type = $(questionWrapper.find("input").get(0)).attr("type");
    labelText = type === "radio" ? $("label[for=" + (question.attr("id").split("-")[0]) + "]", questionWrapper).text() || "" : (ref = $("label[for=" + (question.attr("id")) + "]", questionWrapper)) != null ? ref.text() : void 0;
    required = questionWrapper.attr("data-required") === "true";
    validation = unescape(questionWrapper.attr("data-validation"));
    if (validation === "undefined") {
      validation = null;
    }
    value = window.getValueCache[question_id]();
    if (!questionWrapper.is(":visible")) {
      return "";
    }
    if (question.find("input").length !== 0 && (type === "checkbox" || type === "radio")) {
      return "";
    }
    if (question_id !== "Location") {
      if (required && (value === "" || value === null)) {
        result.push("'" + labelText + "' is required.");
      }
    }
    if ((validation != null) && validation !== "") {
      try {
        validationFunctionResult = (CoffeeScript["eval"]("(value) -> " + validation, {
          bare: true
        }))(value);
        if (validationFunctionResult != null) {
          result.push(validationFunctionResult);
        }
      } catch (_error) {
        error = _error;
        if (error === 'invisible reference') {
          return '';
        }
        alert("Validation error for " + question_id + " with value " + value + ": " + error);
      }
    }
    if (result.length !== 0) {
      return result.join("<br>") + "<br>";
    }
    return "";
  };

  QuestionView.prototype.scrollToQuestion = function(question) {
    return this.autoscroll($(question).prev());
  };

  QuestionView.prototype.autoscroll = function(event) {
    var $div, $target, safetyCounter;
    clearTimeout(this.autoscrollTimer);
    if (event.jquery) {
      $div = event;
      window.scrollTargetName = $div.attr("data-question-name") || $div.attr("name");
    } else {
      $target = $(event.target);
      window.scrollTargetName = $target.attr("name");
      $div = window.questionCache[window.scrollTargetName];
    }
    this.$next = $div.next();
    if (!this.$next.is(":visible") && this.$next.length > 0) {
      safetyCounter = 0;
      while (!this.$next.is(":visible") && (safetyCounter += 1) < 100) {
        this.$next = this.$next.next();
      }
    }
    if (this.$next.is(":visible")) {
      if (window.questionCache[window.scrollTargetName].find(".message").is(":visible")) {
        return;
      }
      $(window).on("scroll", (function(_this) {
        return function() {
          $(window).off("scroll");
          return clearTimeout(_this.autoscrollTimer);
        };
      })(this));
      return this.autoscrollTimer = setTimeout((function(_this) {
        return function() {
          $(window).off("scroll");
          return _this.$next.scrollTo().find("input[type=text],input[type=number]").focus();
        };
      })(this), 1000);
    }
  };

  QuestionView.prototype.actionOnChange = function(event) {
    var $divQuestion, $target, code, error, message, name, newFunction, nodeName, value;
    nodeName = $(event.target).get(0).nodeName;
    $target = nodeName === "INPUT" || nodeName === "SELECT" || nodeName === "TEXTAREA" ? $(event.target) : $(event.target).parent().parent().parent().find("input,textarea,select");
    if (!$target.is(":visible")) {
      return;
    }
    name = $target.attr("name");
    $divQuestion = $(".question [data-question-name=" + name + "]");
    code = $divQuestion.attr("data-action_on_change");
    try {
      value = ResultOfQuestion(name);
    } catch (_error) {
      error = _error;
      if (error === "invisible reference") {
        return;
      }
    }
    if (code === "" || (code == null)) {
      return;
    }
    code = "(value) -> " + code;
    try {
      newFunction = CoffeeScript["eval"].apply(this, [code]);
      return newFunction(value);
    } catch (_error) {
      error = _error;
      name = (/function (.{1,})\(/.exec(error.constructor.toString())[1]);
      message = error.message;
      return alert("Action on change error in question " + ($divQuestion.attr('data-question-id') || $divQuestion.attr("id")) + "\n\n" + name + "\n\n" + message);
    }
  };

  QuestionView.prototype.updateSkipLogic = function() {
    var $question, error, message, name, ref, result, results, skipLogicCode;
    ref = window.questionCache;
    results = [];
    for (name in ref) {
      $question = ref[name];
      skipLogicCode = window.skipLogicCache[name];
      if (skipLogicCode === "" || (skipLogicCode == null)) {
        continue;
      }
      try {
        result = eval(skipLogicCode);
      } catch (_error) {
        error = _error;
        if (error === "invisible reference") {
          result = true;
        } else {
          name = (/function (.{1,})\(/.exec(error.constructor.toString())[1]);
          message = error.message;
          alert("Skip logic error in question " + ($question.attr('data-question-id')) + "\n\n" + name + "\n\n" + message);
        }
      }
      if (result) {
        results.push($question[0].style.display = "none");
      } else {
        results.push($question[0].style.display = "");
      }
    }
    return results;
  };

  QuestionView.prototype.save = _.throttle(function() {
    var currentData;
    currentData = $('form').toObject({
      skipEmpty: false
    });
    currentData.lastModifiedAt = moment(new Date()).format(Coconut.config.get("datetime_format"));
    currentData.savedBy = $.cookie('current_user');
    return this.result.save(currentData, {
      success: (function(_this) {
        return function(model) {
          $("#messageText").slideDown().fadeOut();
          Coconut.router.navigate("edit/result/" + model.id, false);
          return Coconut.menuView.update();
        };
      })(this)
    });
  }, 1000);

  QuestionView.prototype.completeButton = function(value) {
    this.changedComplete = true;
    if ($('[name=complete]').prop("checked") !== value) {
      return $('[name=complete]').click();
    }
  };

  QuestionView.prototype.toHTMLForm = function(questions, groupId) {
    if (questions == null) {
      questions = this.model;
    }
    window.skipLogicCache = {};
    if (questions.length == null) {
      questions = [questions];
    }
    return _.map(questions, (function(_this) {
      return function(question) {
        var html, index, name, newGroupId, option, options, question_id, repeatable;
        if (question.repeatable() === "true") {
          repeatable = "<button>+</button>";
        } else {
          repeatable = "";
        }
        if ((question.type() != null) && (question.label() != null) && question.label() !== "") {
          name = question.safeLabel();
          window.skipLogicCache[name] = question.skipLogic() !== '' ? CoffeeScript.compile(question.skipLogic(), {
            bare: true
          }) : '';
          question_id = question.get("id");
          if (question.repeatable() === "true") {
            name = name + "[0]";
            question_id = question.get("id") + "-0";
          }
          if (groupId != null) {
            name = "group." + groupId + "." + name;
          }
          return "<div " + (question.validation() ? question.validation() ? "data-validation = '" + (escape(question.validation())) + "'" : void 0 : "") + " data-required='" + (question.required()) + "' class='question " + ((typeof question.type === "function" ? question.type() : void 0) || '') + "' data-question-name='" + name + "' data-question-id='" + question_id + "' data-action_on_change='" + (_.escape(question.actionOnChange())) + "' > " + (!~question.type().indexOf('hidden') ? "<label type='" + (question.type()) + "' for='" + question_id + "'>" + (question.label()) + " <span></span></label>" : void 0) + " <div class='message'></div> " + ((function() {
            var i, len, ref;
            switch (question.type()) {
              case "textarea":
                return "<input name='" + name + "' type='text' id='" + question_id + "' value='" + (_.escape(question.value())) + "'></input>";
              case "select":
                if (this.readonly) {
                  return question.value();
                } else {
                  html = "<select>";
                  ref = question.get("select-options").split(/, */);
                  for (index = i = 0, len = ref.length; i < len; index = ++i) {
                    option = ref[index];
                    html += "<option name='" + name + "' id='" + question_id + "-" + index + "' value='" + option + "'>" + option + "</option>";
                  }
                  return html += "</select>";
                }
                break;
              case "radio":
                if (this.readonly) {
                  return "<input class='radioradio' name='" + name + "' type='text' id='" + question_id + "' value='" + (question.value()) + "'></input>";
                } else {
                  options = question.get("radio-options");
                  return _.map(options.split(/, */), function(option, index) {
                    return "<input class='radio' type='radio' name='" + name + "' id='" + question_id + "-" + index + "' value='" + (_.escape(option)) + "'/> <label class='radio' for='" + question_id + "-" + index + "'>" + option + "</label> <!-- <div class='ui-radio'> <label for=''" + question_id + "-" + index + "' data-corners='true' data-shadow='false' data-iconshadow='true' data-wrapperels='span' data-icon='radio-off' data-theme='c' class='ui-btn ui-btn-corner-all ui-btn-icon-left ui-radio-off ui-btn-up-c'> <span class='ui-btn-inner ui-btn-corner-all'> <span class='ui-btn-text'>" + option + "</span> <span class='ui-icon ui-icon-radio-off ui-icon-shadow'>&nbsp;</span> </span> </label> <input type='radio' name='" + name + "' id='" + question_id + "-" + index + "' value='" + (_.escape(option)) + "'/> </div> -->";
                  }).join("");
                }
                break;
              case "checkbox":
                if (this.readonly) {
                  return "<input name='" + name + "' type='text' id='" + question_id + "' value='" + (_.escape(question.value())) + "'></input>";
                } else {
                  return "<input style='display:none' name='" + name + "' id='" + question_id + "' type='checkbox' value='true'></input>";
                }
                break;
              case "autocomplete from list":
              case "autocomplete from previous entries":
              case "autocomplete from code":
                return "<!-- autocomplete='off' disables browser completion --> <input autocomplete='off' name='" + name + "' id='" + question_id + "' type='" + (question.type()) + "' value='" + (question.value()) + "' data-autocomplete-options='" + (question.get("autocomplete-options")) + "'></input> <ul id='" + question_id + "-suggestions' data-role='listview' data-inset='true'/>";
              case "location":
                this.watchID = navigator.geolocation.getAccurateCurrentPosition(function() {}, function() {}, function() {}, {
                  desiredAccuracy: 50,
                  maxWait: 60 * 5 * 1000
                });
                return "<a data-question-id='" + question_id + "'>Get current location</a> <label for='" + question_id + "-description'>Location Description</label> <input type='text' name='" + name + "-description' id='" + question_id + "-description'></input> " + (_.map(["latitude", "longitude", "accuracy"], function(field) {
                  return "<label for='" + question_id + "-" + field + "'>" + field + "</label><input readonly='readonly' type='number' name='" + name + "-" + field + "' id='" + question_id + "-" + field + "'></input>";
                }).join("")) + " " + (_.map(["altitude", "altitudeAccuracy", "heading", "timestamp"], function(field) {
                  return "<input type='hidden' name='" + name + "-" + field + "' id='" + question_id + "-" + field + "'></input>";
                }).join(""));
              case "image":
                return "<img style='" + (question.get("image-style")) + "' src='" + (question.get("image-path")) + "'/>";
              case "label":
                return "";
              default:
                return "<input name='" + name + "' id='" + question_id + "' type='" + (question.type()) + "' value='" + (question.value()) + "'></input>";
            }
          }).call(_this)) + " </div> " + repeatable;
        } else {
          newGroupId = question_id;
          if (question.repeatable()) {
            newGroupId = newGroupId + "[0]";
          }
          return ("<div data-group-id='" + question_id + "' class='question group'>") + _this.toHTMLForm(question.questions(), newGroupId) + "</div>" + repeatable;
        }
      };
    })(this)).join("");
  };

  QuestionView.prototype.updateCache = function() {
    var $qC, accessorFunction, i, inputs, len, name, question, ref, selects, type;
    window.questionCache = {};
    window.getValueCache = {};
    window.$questions = $(".question");
    ref = window.$questions;
    for (i = 0, len = ref.length; i < len; i++) {
      question = ref[i];
      name = question.getAttribute("data-question-name");
      if ((name != null) && name !== "") {
        accessorFunction = {};
        window.questionCache[name] = $(question);
        $qC = window.questionCache[name];
        selects = $("select[name=" + name + "]", $qC);
        if (selects.length === 0) {
          inputs = $("input[name=" + name + "]", $qC);
          if (inputs.length !== 0) {
            type = inputs[0].getAttribute("type");
            if (type === "radio") {
              (function(name, $qC) {
                return accessorFunction = function() {
                  return $("input:checked", $qC).safeVal();
                };
              })(name, $qC);
            } else if (type === "checkbox") {
              (function(name, $qC) {
                return accessorFunction = function() {
                  return $("input", $qC).map(function() {
                    return $(this).safeVal();
                  });
                };
              })(name, $qC);
            } else {
              (function(inputs) {
                return accessorFunction = function() {
                  return inputs.safeVal();
                };
              })(inputs);
            }
          } else {
            (function(name, $qC) {
              return accessorFunction = function() {
                return $(".textarea[name=" + name + "]", $qC).safeVal();
              };
            })(name, $qC);
          }
        } else {
          (function(selects) {
            return accessorFunction = function() {
              return selects.safeVal();
            };
          })(selects);
        }
        window.getValueCache[name] = accessorFunction;
      }
    }
    return window.keyCache = _.keys(questionCache);
  };

  QuestionView.prototype.repeat = function(event) {
    var button, i, inputElement, len, name, newIndex, newQuestion, questionID, re, ref;
    button = $(event.target);
    newQuestion = button.prev(".question").clone();
    questionID = newQuestion.attr("data-group-id");
    if (questionID == null) {
      questionID = "";
    }
    ref = newQuestion.find("input");
    for (i = 0, len = ref.length; i < len; i++) {
      inputElement = ref[i];
      inputElement = $(inputElement);
      name = inputElement.attr("name");
      re = new RegExp(questionID + "\\[(\\d)\\]");
      newIndex = parseInt(_.last(name.match(re))) + 1;
      inputElement.attr("name", name.replace(re, questionID + "[" + newIndex + "]"));
    }
    button.after(newQuestion.add(button.clone()));
    return button.remove();
  };

  QuestionView.prototype.getLocation = function(event) {
    var maxWait, onError, onProgress, onSuccess, question_id, requiredAccuracy, updateFormWithCoordinates;
    requiredAccuracy = 200;
    maxWait = 3 * 60 * 1000;
    question_id = $(event.target).closest("[data-question-id]").attr("data-question-id");
    $("#" + question_id + "-description").val("Retrieving position, please wait.");
    updateFormWithCoordinates = function(geoposition) {
      _.each(geoposition.coords, function(value, key) {
        return $("#" + question_id + "-" + key).val(value);
      });
      $("#" + question_id + "-timestamp").val(moment(geoposition.timestamp).format(Coconut.config.get("datetime_format")));
      return $.getJSON("http://api.geonames.org/findNearbyPlaceNameJSON?lat=" + geoposition.coords.latitude + "&lng=" + geoposition.coords.longitude + "&username=mikeymckay&callback=?", null, (function(_this) {
        return function(result) {
          return $("#" + question_id + "-description").val(parseFloat(result.geonames[0].distance).toFixed(1) + " km from center of " + result.geonames[0].name);
        };
      })(this));
    };
    onSuccess = (function(_this) {
      return function(geoposition) {
        $("label[type=location]").html("Household Location");
        updateFormWithCoordinates(geoposition);
        $("#" + question_id + "-description").val("Success");
        return _this.save();
      };
    })(this);
    onError = function(error) {
      return $("#" + question_id + "-description").val("Error: " + (JSON.stringify(error)));
    };
    onProgress = (function(_this) {
      return function(geoposition) {
        updateFormWithCoordinates(geoposition);
        return $("label[type=location]").html("Household Location<div style='background-color:yellow'>Current accuracy is " + geoposition.coords.accuracy + " meters - must be less than " + requiredAccuracy + " meters. Make sure there are no trees or buildings blocking view to the sky.</div>");
      };
    })(this);
    navigator.geolocation.clearWatch(this.watchID);
    return navigator.geolocation.getAccurateCurrentPosition(onSuccess, onError, onProgress, {
      desiredAccuracy: requiredAccuracy,
      maxWait: maxWait
    });
  };

  return QuestionView;

})(Backbone.View);

(function($) {
  $.fn.scrollTo = function(speed, callback) {
    var e;
    if (speed == null) {
      speed = 500;
    }
    try {
      $('html, body').animate({
        scrollTop: $(this).offset().top + 'px'
      }, speed, null, callback);
    } catch (_error) {
      e = _error;
      console.log("error", e);
      console.log("Scroll error with 'this'", this);
    }
    return this;
  };
  return $.fn.safeVal = function() {
    if (this.is(":visible") || this.parents(".question").filter(function() {
      return !$(this).hasClass("group");
    }).is(":visible")) {
      return $.trim(this.val() || '');
    } else {
      return null;
    }
  };
})($);

var ResultsView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

ResultsView = (function(superClass) {
  extend(ResultsView, superClass);

  function ResultsView() {
    this.render = bind(this.render, this);
    return ResultsView.__super__.constructor.apply(this, arguments);
  }

  ResultsView.prototype.initialize = function() {
    return this.question = new Question();
  };

  ResultsView.prototype.el = '#content';

  ResultsView.prototype.render = function() {
    this.$el.html(("<style> table.results th.header, table.results td{ font-size:150%; } .dataTables_wrapper .dataTables_length{ display: none; } .dataTables_filter input{ display:inline; width:300px; } a[role=button]{ background-color: white; margin-right:5px; -moz-border-radius: 1em; -webkit-border-radius: 1em; border: solid gray 1px; font-family: Helvetica,Arial,sans-serif; font-weight: bold; color: #222; text-shadow: 0 1px 0 #fff; -webkit-background-clip: padding-box; -moz-background-clip: padding; background-clip: padding-box; padding: .6em 20px; text-overflow: ellipsis; overflow: hidden; white-space: nowrap; position: relative; zoom: 1; } a[role=button].paginate_disabled_previous, a[role=button].paginate_disabled_next{ color:gray; } .dataTables_info{ float:right; } .dataTables_paginate{ margin-bottom:20px; } </style> <a href='#new/result/" + (escape(this.question.id)) + "'>Add new '" + this.question.id + "'</a> <div class='not-complete' data-collapsed='false' data-role='collapsible'> <h2>'" + this.question.id + "' Items Not Completed (<span class='count-complete-false'></span>)</h2> <table class='results complete-false tablesorter'> <thead><tr>") + _.map(this.question.summaryFieldNames(), function(summaryField) {
      return "<th class='header'>" + summaryField + "</th>";
    }).join("") + "<th></th> </tr></thead> <tbody> </tbody> <tfoot><tr>" + _.map(this.question.summaryFieldNames(), function(summaryField) {
      return "<th class='header'>" + summaryField + "</th>";
    }).join("") + ("<th></th> </tr></tfoot> </table> </div> <div class='complete' data-role='collapsible'> <h2>'" + this.question.id + "' Items Completed (or transferred out) (<span class='count-complete-true'></span>)</h2> <table class='results complete-true tablesorter'> <thead><tr>") + _.map(this.question.summaryFieldNames(), function(summaryField) {
      return "<th class='header'>" + summaryField + "</th>";
    }).join("") + "<th></th> </tr></thead> <tbody> </tbody> <tfoot><tr>" + _.map(this.question.summaryFieldNames(), function(summaryField) {
      return "<th class='header'>" + summaryField + "</th>";
    }).join("") + "<th></th> </tr></tfoot> </table> </div>");
    $("a").button();
    $('[data-role=collapsible]').collapsible();
    $('.complete').bind("expand", (function(_this) {
      return function() {
        return _this.loadResults(true);
      };
    })(this));
    this.loadResults(false);
    return this.updateCountComplete();
  };

  ResultsView.prototype.updateCountComplete = function() {
    var results;
    console.log("ZZZ");
    results = new ResultCollection();
    return results.fetch({
      question: this.question.id,
      isComplete: true,
      success: (function(_this) {
        return function() {
          return $(".count-complete-true").html(results.results.length);
        };
      })(this)
    });
  };

  ResultsView.prototype.loadResults = function(complete) {
    var results;
    results = new ResultCollection();
    return results.fetch({
      include_docs: "true",
      question: this.question.id,
      isComplete: complete,
      success: (function(_this) {
        return function() {
          $(".count-complete-" + complete).html(results.results.length);
          results.each(function(result, index) {
            if (complete !== "true" && result.wasTransferredOut()) {
              $(".count-complete-" + complete).html(parseInt($(".count-complete-" + complete).html()) - 1);
              return;
            }
            $("table.complete-" + complete + " tbody").append("<tr> " + (_.map(result.summaryValues(_this.question), function(value) {
              return "<td><a href='#edit/result/" + result.id + "'>" + value + "</a></td>";
            }).join("")) + " <td><a href='#delete/result/" + result.id + "' data-icon='delete' data-iconpos='notext'>Delete</a></td> </tr>");
            if (index + 1 === results.length) {
              $("table a").button();
              $("table").trigger("update");
            }
            return _.each($('table tr'), function(row, index) {
              if (index % 2 === 1) {
                return $(row).addClass("odd");
              }
            });
          });
          $('table').dataTable();
          return $(".dataTables_filter input").textinput();
        };
      })(this)
    });
  };

  return ResultsView;

})(Backbone.View);

var SyncView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SyncView = (function(superClass) {
  extend(SyncView, superClass);

  function SyncView() {
    this.update = bind(this.update, this);
    this.render = bind(this.render, this);
    return SyncView.__super__.constructor.apply(this, arguments);
  }

  SyncView.prototype.initialize = function() {
    return this.sync = new Sync();
  };

  SyncView.prototype.el = '#content';

  SyncView.prototype.render = function() {
    this.$el.html("");
    return $("#log").html("");
  };

  SyncView.prototype.update = function() {
    return this.sync.fetch({
      success: (function(_this) {
        return function() {
          $(".sync-sent-status").html(_this.sync.was_last_send_successful() ? _this.sync.last_send_time() : (_this.sync.last_send_time()) + " - last attempt FAILED");
          return $(".sync-get-status").html(_this.sync.was_last_get_successful() ? _this.sync.last_get_time() : (_this.sync.last_get_time()) + " - last attempt FAILED");
        };
      })(this),
      error: (function(_this) {
        return function() {
          console.log("synclog doesn't exist yet, create it and re-render");
          _this.sync.save();
          return _.delay(_this.update, 1000);
        };
      })(this)
    });
  };

  return SyncView;

})(Backbone.View);

var Coconut, Router,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Router = (function(superClass) {
  extend(Router, superClass);

  function Router() {
    this.userWithRoleLoggedIn = bind(this.userWithRoleLoggedIn, this);
    return Router.__super__.constructor.apply(this, arguments);
  }

  Router.prototype.routes = {
    "login": "login",
    "logout": "logout",
    "show/results/:question_id": "showResults",
    "new/result/:question_id": "newResult",
    "show/result/:result_id": "showResult",
    "edit/result/:result_id": "editResult",
    "delete/result/:result_id": "deleteResult",
    "delete/result/:result_id/:confirmed": "deleteResult",
    "reset/database": "resetDatabase",
    "sync": "sync",
    "sync/send": "syncSend",
    "sync/get": "syncGet",
    "configure": "configure",
    "help": "help",
    "help/:helpDocument": "help",
    "csv/:question/startDate/:startDate/endDate/:endDate": "csv",
    "": "default"
  };

  Router.prototype.route = function(route, name, callback) {
    Backbone.history || (Backbone.history = new Backbone.History);
    if (!_.isRegExp(route)) {
      route = this._routeToRegExp(route);
    }
    return Backbone.history.route(route, (function(_this) {
      return function(fragment) {
        var args;
        args = _this._extractParameters(route, fragment);
        callback.apply(_this, args);
        $('#loading').slideDown();
        _this.trigger.apply(_this, ['route:' + name].concat(args));
        return $('#loading').fadeOut();
      };
    })(this), this);
  };

  Router.prototype.userLoggedIn = function(callback) {
    return User.isAuthenticated({
      success: function(user) {
        return callback.success(user);
      },
      error: function() {
        Coconut.loginView.callback = callback;
        return Coconut.loginView.render();
      }
    });
  };

  Router.prototype.csv = function(question, startDate, endDate) {
    return this.userLoggedIn({
      success: function() {
        var csvView;
        if (User.currentUser.hasRole("reports")) {
          csvView = new CsvView;
          csvView.question = question;
          csvView.startDate = endDate;
          csvView.endDate = startDate;
          return csvView.render();
        }
      }
    });
  };

  Router.prototype.help = function(helpDocument) {
    return this.userLoggedIn({
      success: function() {
        if (Coconut.helpView == null) {
          Coconut.helpView = new HelpView();
        }
        if (helpDocument != null) {
          Coconut.helpView.helpDocument = helpDocument;
        } else {
          Coconut.helpView.helpDocument = null;
        }
        return Coconut.helpView.render();
      }
    });
  };

  Router.prototype.login = function() {
    Coconut.loginView.callback = {
      success: function() {
        return Coconut.router.navigate("", true);
      }
    };
    return Coconut.loginView.render();
  };

  Router.prototype.userWithRoleLoggedIn = function(role, callback) {
    return this.userLoggedIn({
      success: function(user) {
        if (user.hasRole(role)) {
          return callback.success(user);
        } else {
          return $("#content").html("<h2>User '" + (user.username()) + "' must have role: '" + role + "'</h2>");
        }
      },
      error: function() {
        return $("#content").html("<h2>User '" + (user.username()) + "' must have role: '" + role + "'</h2>");
      }
    });
  };

  Router.prototype.adminLoggedIn = function(callback) {
    return this.userLoggedIn({
      success: function(user) {
        if (user.isAdmin()) {
          return callback.success(user);
        }
      },
      error: function() {
        return $("#content").html("<h2>Must be an admin user</h2>");
      }
    });
  };

  Router.prototype.logout = function() {
    User.logout();
    Coconut.router.navigate("", true);
    return document.location.reload();
  };

  Router.prototype["default"] = function() {
    return this.userLoggedIn({
      success: function() {
        if (User.currentUser.hasRole("reports")) {
          Coconut.router.navigate("reports", true);
        }
        return $("#content").html("");
      }
    });
  };

  Router.prototype.configure = function() {
    return this.userLoggedIn({
      success: function() {
        if (Coconut.localConfigView == null) {
          Coconut.localConfigView = new LocalConfigView();
        }
        return Coconut.localConfigView.render();
      }
    });
  };

  Router.prototype.editQuestion = function(question_id) {
    return this.userLoggedIn({
      success: function() {
        if (Coconut.designView == null) {
          Coconut.designView = new DesignView();
        }
        Coconut.designView.render();
        return Coconut.designView.loadQuestion(unescape(question_id));
      }
    });
  };

  Router.prototype.deleteQuestion = function(question_id) {
    return this.userLoggedIn({
      success: function() {
        return Coconut.questions.get(unescape(question_id)).destroy({
          success: function() {
            Coconut.menuView.render();
            return Coconut.router.navigate("manage", true);
          }
        });
      }
    });
  };

  Router.prototype.syncSend = function(action) {
    Coconut.router.navigate("", false);
    return this.userLoggedIn({
      success: function() {
        if (Coconut.syncView == null) {
          Coconut.syncView = new SyncView();
        }
        Coconut.syncView.render();
        return Coconut.syncView.sync.sendToCloud({
          success: function() {
            return Coconut.syncView.update();
          },
          error: function() {
            return Coconut.syncView.update();
          }
        });
      }
    });
  };

  Router.prototype.syncGet = function(action) {
    Coconut.router.navigate("", false);
    return this.userLoggedIn({
      success: function() {
        if (Coconut.syncView == null) {
          Coconut.syncView = new SyncView();
        }
        Coconut.syncView.render();
        return Coconut.syncView.sync.getFromCloud();
      }
    });
  };

  Router.prototype.manage = function() {
    return this.adminLoggedIn({
      success: function() {
        if (Coconut.manageView == null) {
          Coconut.manageView = new ManageView();
        }
        return Coconut.manageView.render();
      }
    });
  };

  Router.prototype.newResult = function(question_id) {
    return this.userLoggedIn({
      success: function() {
        if (Coconut.questionView == null) {
          Coconut.questionView = new QuestionView();
        }
        Coconut.questionView.result = new Result({
          question: unescape(question_id)
        });
        Coconut.questionView.model = new Question({
          id: unescape(question_id)
        });
        return Coconut.questionView.model.fetch({
          success: function() {
            return Coconut.questionView.render();
          }
        });
      }
    });
  };

  Router.prototype.showResult = function(result_id) {
    return this.userLoggedIn({
      success: function() {
        if (Coconut.questionView == null) {
          Coconut.questionView = new QuestionView();
        }
        Coconut.questionView.readonly = true;
        Coconut.questionView.result = new Result({
          _id: result_id
        });
        return Coconut.questionView.result.fetch({
          success: function() {
            var question;
            question = Coconut.questionView.result.question();
            if (question != null) {
              Coconut.questionView.model = new Question({
                id: question
              });
              return Coconut.questionView.model.fetch({
                success: function() {
                  return Coconut.questionView.render();
                }
              });
            } else {
              $("#content").html("<button id='delete' type='button'>Delete</button> <pre>" + (JSON.stringify(Coconut.questionView.result, null, 2)) + "</pre>");
              return $("button#delete").click(function() {
                if (confirm("Are you sure you want to delete this result?")) {
                  return Coconut.questionView.result.destroy({
                    success: function() {
                      $("#content").html("Result deleted, redirecting...");
                      return _.delay(function() {
                        return Coconut.router.navigate("/", true);
                      }, 2000);
                    }
                  });
                }
              });
            }
          }
        });
      }
    });
  };

  Router.prototype.editResult = function(result_id) {
    return this.userLoggedIn({
      success: function() {
        if (Coconut.questionView == null) {
          Coconut.questionView = new QuestionView();
        }
        Coconut.questionView.readonly = false;
        Coconut.questionView.result = new Result({
          _id: result_id
        });
        return Coconut.questionView.result.fetch({
          success: function() {
            var question;
            question = Coconut.questionView.result.question();
            if (question != null) {
              Coconut.questionView.model = new Question({
                id: question
              });
              return Coconut.questionView.model.fetch({
                success: function() {
                  return Coconut.questionView.render();
                }
              });
            } else {
              $("#content").html("<button id='delete' type='button'>Delete</button> <br/> (Editing not supported for USSD Notifications) <br/> <pre>" + (JSON.stringify(Coconut.questionView.result, null, 2)) + "</pre>");
              return $("button#delete").click(function() {
                if (confirm("Are you sure you want to delete this result?")) {
                  return Coconut.questionView.result.destroy({
                    success: function() {
                      $("#content").html("Result deleted, redirecting...");
                      return _.delay(function() {
                        return Coconut.router.navigate("/", true);
                      }, 2000);
                    }
                  });
                }
              });
            }
          }
        });
      }
    });
  };

  Router.prototype.deleteResult = function(result_id, confirmed) {
    return this.userLoggedIn({
      success: function() {
        if (Coconut.questionView == null) {
          Coconut.questionView = new QuestionView();
        }
        Coconut.questionView.readonly = true;
        Coconut.questionView.result = new Result({
          _id: result_id
        });
        return Coconut.questionView.result.fetch({
          success: function() {
            var question;
            question = Coconut.questionView.result.question();
            if (question != null) {
              if (confirmed === "confirmed") {
                return Coconut.questionView.result.destroy({
                  success: function() {
                    Coconut.menuView.update();
                    return Coconut.router.navigate("show/results/" + (escape(Coconut.questionView.result.question())), true);
                  }
                });
              } else {
                Coconut.questionView.model = new Question({
                  id: question
                });
                return Coconut.questionView.model.fetch({
                  success: function() {
                    Coconut.questionView.render();
                    $("#content").prepend("<h2>Are you sure you want to delete this result?</h2> <div id='confirm'> <a href='#delete/result/" + result_id + "/confirmed'>Yes</a> <a href='#show/results/" + (escape(Coconut.questionView.result.question())) + "'>Cancel</a> </div>");
                    $("#confirm a").button();
                    $("#content form").css({
                      "background-color": "#333",
                      "margin": "50px",
                      "padding": "10px"
                    });
                    return $("#content form label").css({
                      "color": "white"
                    });
                  }
                });
              }
            } else {
              return Coconut.router.navigate("edit/result/" + result_id, true);
            }
          }
        });
      }
    });
  };

  Router.prototype.showResults = function(question_id) {
    return this.userLoggedIn({
      success: function() {
        if (Coconut.resultsView == null) {
          Coconut.resultsView = new ResultsView();
        }
        Coconut.resultsView.question = new Question({
          id: unescape(question_id)
        });
        return Coconut.resultsView.question.fetch({
          success: function() {
            return Coconut.resultsView.render();
          }
        });
      }
    });
  };

  Router.prototype.resetDatabase = function() {
    return this.userLoggedIn({
      success: function() {
        if (confirm("Are you sure you want to reset the database? All data that has not yet been sent to the cloud will be lost.")) {
          return database.destroy(function(error, result) {
            Coconut.router.navigate("", true);
            return document.location.reload();
          });
        }
      }
    });
  };

  Router.prototype.startApp = function() {
    Coconut.config = new Config();
    return Coconut.config.fetch({
      success: function() {
        var classesToLoad, startApplication;
        if (Coconut.config.local.get("mode") === "cloud") {
          $("body").append("<style> .leaflet-map-pane { z-index: 2 !important; } .leaflet-google-layer { z-index: 1 !important; } </style>");
        }
        $("#footer-menu").html("<center> <span style='font-size:75%;display:inline-block'> <span id='district'></span><br/> <span id='user'></span> </span> <a href='#login'>Login</a> <a href='#logout'>Logout</a> " + (Coconut.config.local.get("mode") === "cloud" ? "<a id='reports-button' href='#reports'>Reports</a>" : "<a href='#sync/send'>Send data (last success: <span class='sync-sent-status'></span>)</a> <a href='#sync/get'>Get data (last success: <span class='sync-get-status'></span>)</a> <a href='#reset/database'>Reset database</a>") + " &nbsp; <a id='manage-button' style='display:none' href='#manage'>Manage</a> &nbsp; <a href='#help'>Help</a> <span style='font-size:75%;display:inline-block'>Version<br/><span id='version'></span></span> <span style='font-size:75%;display:inline-block'><br/><span id='databaseStatus'></span></span> </center>");
        $("[data-role=footer]").navbar();
        $('#application-title').html(Coconut.config.title());
        classesToLoad = [UserCollection, ResultCollection];
        startApplication = _.after(classesToLoad.length, function() {
          Coconut.loginView = new LoginView();
          Coconut.questionView = new QuestionView();
          Coconut.menuView = new MenuView();
          Coconut.syncView = new SyncView();
          Coconut.menuView.render();
          Coconut.syncView.update();
          return Backbone.history.start();
        });
        return QuestionCollection.load({
          error: function(error) {
            return alert("Could not load " + ClassToLoad + ": " + error + ". Recommendation: Press get data again.");
          },
          success: function() {
            return _.each(classesToLoad, function(ClassToLoad) {
              return ClassToLoad.load({
                success: function() {
                  return startApplication();
                },
                error: function(error) {
                  alert("Could not load " + ClassToLoad + ": " + error + ". Recommendation: Press get data again.");
                  return startApplication();
                }
              });
            });
          }
        });
      },
      error: function() {
        if (Coconut.localConfigView == null) {
          Coconut.localConfigView = new LocalConfigView();
        }
        return Coconut.localConfigView.render();
      }
    });
  };

  return Router;

})(Backbone.Router);

Coconut = {};

Coconut.router = new Router();

database.get('_local/initial_load_complete', function(error, result) {
  var cloudDefault, passwordDefault, usernameDefault;
  if (error) {
    if (error.status !== 404) {
      throw error;
    }
    cloudDefault = "";
    usernameDefault = "";
    passwordDefault = "";
    return $.ajax({
      url: "defaults.json",
      success: function(result) {
        var ref;
        if (result) {
          cloudDefault = result.cloud;
          return ref = result.cloud_credentials.split(":"), usernameDefault = ref[0], passwordDefault = ref[1], ref;
        }
      },
      complete: function() {
        var cloudUrl, sync;
        cloudUrl = prompt("Enter cloud URL", cloudDefault);
        cloudUrl = cloudUrl.replace(/http:\/\//, "");
        Coconut.config = new Config({
          cloud: cloudUrl,
          cloud_database_name: prompt("Enter application name"),
          cloud_credentials: (prompt("Enter cloud username", usernameDefault)) + ":" + (prompt("Enter cloud password", passwordDefault))
        });
        Coconut.config.save();
        sync = new Sync;
        return sync.replicateApplicationDocs({
          error: function(error) {
            return console.error("Updating application docs failed: " + (JSON.stringify(error)));
          },
          success: function() {
            database.put({
              _id: '_local/initial_load_complete'
            }, function(error, result) {
              if (error) {
                return console.log(error);
              }
            });
            Coconut.router.startApp();
            return _.delay(function() {
              return $("#log").html("");
            }, 5000);
          }
        });
      }
    });
  } else {
    _.delay(appCacheNanny.start, 5000);
    return Coconut.router.startApp();
  }
});

Coconut.debug = function(string) {
  console.log(string);
  return $("#log").append(string + "<br/>");
};

//# sourceMappingURL=data:application/json;base64,